# docker build -f Dockerfile.node -t accetto/xubuntu-vnc-node .
# docker build -f Dockerfile.node --build-arg BASEIMAGE=accetto/xubuntu-vnc-firefox -t accetto/xubuntu-vnc-node:firefox .
# docker build -f Dockerfile.node --build-arg BASEIMAGE=accetto/xubuntu-vnc-chromium -t accetto/xubuntu-vnc-node:chromium .
# docker build -f Dockerfile.node --build-arg ARG_NODE_PORT=5000 -t accetto/xubuntu-vnc-node:5000 .
# docker build -f Dockerfile.node --build-arg BASETAG=lab -t accetto/xubuntu-vnc-node:lab .
# docker build -f Dockerfile.node -t accetto/xubuntu-vnc-node:dfw .
# docker build -f Dockerfile.node --build-arg BASEIMAGE=accetto/xubuntu-vnc-firefox -t accetto/xubuntu-vnc-node:dfw-firefox .
# docker build -f Dockerfile.node --build-arg BASEIMAGE=accetto/xubuntu-vnc-chromium -t accetto/xubuntu-vnc-node:dfw-chromium .
# docker build -f Dockerfile.node -t accetto/xubuntu-vnc-node:dfw-distro .

ARG BASEIMAGE=accetto/xubuntu-vnc
ARG BASETAG=latest

FROM ${BASEIMAGE}:${BASETAG} as stage-utils

USER 0

### 'apt-get clean' runs automatically
RUN apt-get update && apt-get install -y \
        curl \
        git \
    && apt-get -y autoremove \
    && rm -rf /var/lib/apt/lists/*

FROM stage-utils as stage-node

### This would currently install 'node v8.10.0' with 'npm v3.5.2'
### 'apt-get clean' runs automatically
# RUN \
#     chmod g+w /usr/local/lib \
#     && apt-get update && apt-get install -y \
#         nodejs \
#         npm \
#     && apt-get -y autoremove \
#     && rm -rf /var/lib/apt/lists/*

### Alternatively install a newer version explicitly
ENV \
    NODE_VERSION=v10.16.3 \
    NODE_DISTRO=linux-x64 \
    NODE_PATH=/usr/local/lib/nodejs \
    NPM_CONFIG_PREFIX=${HOME}/.npm-global
ENV \
    PATH=${NPM_CONFIG_PREFIX}/bin:/usr/local/lib/nodejs/node-${NODE_VERSION}-${NODE_DISTRO}/bin:${PATH}
RUN \
    mkdir -p \
        ${NPM_CONFIG_PREFIX} \
        ${NODE_PATH} \
        ${HOME}/.npm \
    && chmod g+w \
        ${NPM_CONFIG_PREFIX} \
        /usr/local/lib \
    && wget -qO- https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-${NODE_DISTRO}.tar.xz \
        | tar -xJv -C /usr/local/lib/nodejs \
    && ln -s /usr/local/lib/nodejs/node-${NODE_VERSION}-${NODE_DISTRO}/bin/node /usr/bin/node \
    && ln -s /usr/local/lib/nodejs/node-${NODE_VERSION}-${NODE_DISTRO}O/bin/npm /usr/bin/npm \
    && ln -s /usr/local/lib/nodejs/node-${NODE_VERSION}-${NODE_DISTRO}/bin/npx /usr/bin/npx \
    && npm config set prefix ${NPM_CONFIG_PREFIX}

### Fix permissions
RUN /dockerstartup/set_user_permissions.sh ${HOME}

FROM stage-node as stage-final

ARG ARG_REFRESHED_AT
ARG ARG_NODE_PORT

ENV NODE_PORT=${ARG_NODE_PORT:-3000}

WORKDIR /usr/src

### add a simple app for testing node
### start it by 'node app.js' and connect to the container's port ${NODE_PORT}
### dont'f forget to create the container as for example 'docker run -p 3000 ...'
COPY [ "./src/node-test-app", "./node-test-app/" ]

RUN chmod -R g+w /usr/src

### optionally expose the node port
# EXPOSE ${NODE_PORT}

ENV REFRESHED_AT=${ARG_REFRESHED_AT}

USER 1001
