#!/bin/bash
### @accetto (https://github.com/accetto) (https://hub.docker.com/u/accetto/)

# ARG_POSITIONAL_SINGLE([image],[Docker image])
# ARG_POSITIONAL_MULTI([command],[Command with an optional parameter],[2],[""],[""])
# ARG_DEFAULTS_POS([])
# ARG_VERSION([echo $0 v19.12.14])
# ARG_HELP([Displays selected image data using an ephemeral container created from it.\nBy missing command the environment variables VERSION_STICKER and REFRESHED_AT are displayed.\nUnsupported parameters are mostly ignored.\nThe supported commands and parameters are:\n- date\n    Displays the environment variable REFRESHED_AT, which is the built date of the image.\n- version\n    Displays the environment variable VERSION_STICKER.\n- version calculated\n    Executes 'version_sticker.sh' inside the container.\n- version verbose\n    Executes 'version_sticker.sh -V' inside the container.\n- variable <variable>\n    Display the container's environment variable <variable>, e.g. 'variable HOME'.\n- env\n    Displays all container's environment variables.\n- startup\n    Displays the container's startup help.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='vh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_image=
_arg_command=("" "")
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "Displays selected image data using an ephemeral container created from it.
By missing command the environment variables VERSION_STICKER and REFRESHED_AT are displayed.
Unsupported parameters are mostly ignored.
The supported commands and parameters are:
- date
    Displays the environment variable REFRESHED_AT, which is the built date of the image.
- version
    Displays the environment variable VERSION_STICKER.
- version calculated
    Executes 'version_sticker.sh' inside the container.
- version verbose
    Executes 'version_sticker.sh -V' inside the container.
- variable <variable>
    Display the container's environment variable <variable>, e.g. 'variable HOME'.
- env
    Displays all container's environment variables.
- startup
    Displays the container's startup help."
	printf 'Usage: %s [-v|--version] [-h|--help] <image> [<command-1>] [<command-2>]\n' "$0"
	printf '\t%s\n' "<image>: Docker image"
	printf '\t%s\n' "<command>: Command with an optional parameter (defaults for <command-1> to <command-2> respectively: '""' and '""')"
	printf '\t%s\n' "-v, --version: Prints version"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-v|--version)
				echo $0 v19.12.14
				exit 0
				;;
			-v*)
				echo $0 v19.12.14
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'image'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 1 and 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 1 and 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_image _arg_command[0] _arg_command[1] "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# printf "Value of '%s': %s\\n" 'command[0]' "${_arg_command[0]}"
# printf "Value of '%s': %s\\n" 'command[1]' "${_arg_command[1]}"

_command="${_arg_command[0]}"
_param="${_arg_command[1]}"

case "${_command,,}" in
	"")
		docker run --rm "${_arg_image}" -s printenv VERSION_STICKER REFRESHED_AT
		;;
	date)
		docker run --rm "${_arg_image}" -s printenv REFRESHED_AT
		;;
	version)
		case "${_param}" in
			"")
				docker run --rm "${_arg_image}" -s printenv VERSION_STICKER
				;;
			calculated)
				docker run --rm "${_arg_image}" -s /dockerstartup/version_sticker.sh
				;;
			verbose)
				# do not use '-s' here because some applications need a display
				docker run --rm "${_arg_image}" /dockerstartup/version_sticker.sh -V
				;;
			*)
				die "Unsupported version kind: ${_command}"
				;;
		esac
		;;
	variable)
		docker run --rm "${_arg_image}" -s printenv "${_param}"
		;;
	env)
		docker run --rm "${_arg_image}" -s printenv
		;;
	startup)
		docker run --rm "${_arg_image}" -h
		;;
	*)
		die "Unsupported command: ${_command}"
		;;
esac


# ] <-- needed because of Argbash
