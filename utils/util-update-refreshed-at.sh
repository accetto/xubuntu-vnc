#!/bin/bash
### @accetto (https://github.com/accetto) (https://hub.docker.com/u/accetto/)

# ARG_POSITIONAL_SINGLE([folder],[Folder where to start to search for Dockefiles])
# ARG_VERSION([echo $0 v19.06.20])
# ARG_HELP([Updates the REFRESHED_AT environment variable to the current date])
# ARG_OPTIONAL_BOOLEAN([echo],[],[Just print the command line to be executed])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}


begins_with_short_option()
{
  local first_option all_short_options='vh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_echo="off"


print_help()
{
  printf '%s\n' "Updates the REFRESHED_AT environment variable to the current date"
  printf 'Usage: %s [-v|--version] [-h|--help] [--(no-)echo] <folder>\n' "$0"
  printf '\t%s\n' "<folder>: Folder where to start to search for Dockefiles"
  printf '\t%s\n' "-v, --version: Prints version"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\t%s\n' "--echo, --no-echo: Just print the command line to be executed (off by default)"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -v|--version)
        echo $0 v19.06.20
        exit 0
        ;;
      -v*)
        echo $0 v19.06.20
        exit 0
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      --no-echo|--echo)
        _arg_echo="on"
        test "${1:0:5}" = "--no-" && _arg_echo="off"
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'folder'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_folder "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

_key=""
_list=""
_refresh_date=""

# echo "DEBUG: _arg_folder=$_arg_folder"

[[ ! -d "$_arg_folder" ]] && die "FAILED: Folder \"$_arg_folder\" not found!"

_refresh_date=$(date +%Y-%m-%d)

_list=$(find "$_arg_folder" -type f -name 'Dockerfile*')

# echo "DEBUG: list=$_list"

for file in $_list ; do
	echo "$file"
done

read -rp $'Should update the files above? (y) ' -n1 _key
[[ "${_key,,}" != "y" ]] && die "INTERRUPTED"

echo

for file in $_list ; do
    sed -i -e "s/^ENV REFRESHED_AT.*/ENV REFRESHED_AT $_refresh_date/" "$file"
    echo -e "replaced ENV REFRESHED_AT with '$_refresh_date' in '$file'"
done

# ] <-- needed because of Argbash
